private void agregarOrden()
    { 
		int numero = 0;
		string fecha = DateTime.Now().ToString();
		string tipoDeOrden = "";
		bool ordenExiste = false;
		int cantidad = 0;
		bool articuloExiste = false;
		List<ItemDeOrden> itemsDeOrden = new List();
		bool deseaSeguirAgregandoArticulos = false;
		bool ordenTieneItemsDeFabricacionYConsumo = false;

		numero = validador.PedirInt("ingresar numero de orden", 1, 9999);
		tipoDeOrden = validador.PedirTipoDeOrden("ingresar 'sp' (sobre pedido) o 'ps' (para stock)");
		
		ordenExiste = ordenes.Contains(new OrdenDeFabricacion(numero, "", ""));

		if (ordenExiste) {
			Console.WriteLine("ya existe una orden con ese numero");
		} else {
			do {
				string codigoArticulo = validador.PedirStringNoVacio("ingresar codigo de articulo");
				string aFabricarOAConsumir = validador.PedirAFabricarOAConsumir("ingresar 'af' o 'ac'");
				cantidad = validador.PedirInt("ingresar cantidad", 1, 9999);

				articuloExiste = articulos.Contains(new Articulo(codigoArticulo, ""));

				if (!articuloExiste) {
					Console.WriteLine("no existe ese articulo");
				} else {
					if (aFabricarOAConsumir == "af") {
						itemsDeOrden.Add(new ItemDeOrden(cantidad, new Articulo(codigoArticulo), new List(new Fabricacion())));
					} else {
						itemsDeOrden.Add(new ItemDeOrden(cantidad, new Articulo(codigoArticulo), new List(new Consumo())));
					}
				}
				
				deseaSeguirAgregandoArticulos = validador.pedirSiONo("desea seguir agregando articulos? indique 's' o 'n'");
				ordenTieneItemsDeFabricacionYConsumo = validador.OrdenTieneItemsDeFabricacionYConsumo();				

				if (!deseaSeguirAgregandoArticulos && !ordenTieneItemsDeFabricacionYConsumo) {
					Console.WriteLine("debe agregar al menos un item de fabricacion y un item de consumo");
				}

			} while (deseaSeguirAgregandoArticulos || !ordenTieneItemsDeFabricacionYConsumo);
			
			ordenes.Add(new OrdenDeFabricacion(numero, fecha, tipoDeOrden, itemsDeOrden);
		}
	}

private void listarOrdenesPendientes()
	{
		bool ordenEstaPendiente = false;
		int numeroDeOrden = 0;
		int cantidadDeOrdenesPendientes = 0;

		for (int i = 0; i < ordenes.Count()-1; i++) {
			ordenEstaPendiente = ordenes[i].VerificarSiOrdenEstaPendiente();
			numeroDeOrden = ordenes[i].GetNumero();
			
			if (ordenEstaPendiente) {
				cantidadDeOrdenesPendientes++;
				Console.WriteLine(cantidadDeOrdenesPendientes + " - " + numeroDeOrden);
			}
		}
	}



class Validador {

	public Validador() { }

	public string PedirStringNoVacio(mensaje) {
		string retorno = "";
		do {
			Console.WriteLine(mensaje);
			retorno = Console.ReadLine();
			if (retorno == "") {
				Console.WriteLine("debe ingresar texto");
			}
		} while (retorno == "");
		return retorno;
	}

	public string PedirTipoDeOrden(mensaje) {
		string retorno = "";
		do {
			retorno = PedirStringNoVacio(mensaje);
		} while (retorno != "sp" && retorno != "ps");
		return retorno;
	}

	public string PedirAFabricarOAConsumir(mensaje) {
		string retorno = "";
		do {
			retorno = PedirStringNoVacio(mensaje);
		} while (retorno != "ac" && retorno != "af");
		return retorno;
	}

	public bool PedirSiONo(mensaje) {
		bool retorno = false;
		string texto = "";
		do {
			texto = PedirStringNoVacio(mensaje);
			if (texto == "s") {
				retorno = true
			}
		} while (texto != "s" && texto != "n");
		return retorno;
	}

	public int PedirInt(mensaje, minimo, maximo) {
		int retorno = 0;
		bool pudoParsear = false;

		do {
			Console.WriteLine(mensaje);
			pudoParsear = Int32.TryParse(Console.ReadLine(), out retorno);
			if (!pudoParsear) {
				Console.WriteLine("debe ingresar un numero menor o igual a " + minimo + " y mayor o igual a " + maximo);
			}
		} while (!pudoParsear || retorno < minimo || retorno > maximo);
		return retorno;
	}
}










}