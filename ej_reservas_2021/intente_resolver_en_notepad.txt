/*
clases q voy a necesitar:
- App
  . Validador miValidador
  . turnos
  . void Ejecutar()
  . void ListarTurnos()
- Mesa
  . int numero
  . int capacidad
  . bool reservada
  . void ReservarMesa()
  . bool GetReservada()
- Reserva
  . string nombre cliente
  . long telefono cliente
  . int cantidad comensales
  . Turno turno
  . Mesa mesa
  . void MostrarInformacionDeReserva()
- Turno
  . int numero
  . List<Mesa> mesas
  . string horario
  . void MostrarMesasDisponibles()
  . void MostrarReservas()
  . void ReservarMesa(Mesa mesa, Reserva reserva)
- Validador
  . string PedirStringNoVacio(string mensaje)
  . long PedirLong(string mensaje, long minimo, long maximo)
  . int PedirInt(string mensaje, int minimo, int maximo)
  . bool PedirConfirmacion(string mensaje)
  . Turno PedirTurno(string mensaje)
*/

App miApp = new App();
miApp.Ejecutar();

class App {
	private Validador miValidador;
	private List<Turno> turnos;

	public App() {
		this.miValidador = new Validador();
		this.turnos = new List<Turno>(new Turno(1, "15:00-17:00"), new Turno(2, "17:00-19:00"), 
			new Turno(3, "19:00-21:00"), new Turno(4, "21:00-23:00"));
	}
	
	public void Ejecutar() {
		string opcion = "";
		do {
			Console.WriteLine("1. Ingresar reserva \n" + "2. Listar reservas por turno \n" + "3. Salir");
			opcion = Console.ReadLine();
			if (opcion == "1") {
				IngresarReserva();
			} else if (opcion == "2") {
				ListarReservasPorTurno();
			} else if (opcion != 3) {
				Console.WriteLine("debe ingresar '1', '2' o '3'.");
			}
		} while (opcion != 3);
	}

	public void IngresarReserva() {
		string nombreCliente = "";
		long telefonoCliente = 0;
		int cantidadComensales = 0;
		Turno turno;
		Mesa mesa;
		Reserva reserva;
		bool usuarioConfirmo = false;

		nombreCliente = miValidador.PedirStringNoVacio("ingrese su nombre");
		telefonoCliente = miValidador.PedirLong("ingrese su telefono sin simbolos, solo en numeros", 0, 99999999999999);
		cantidadComensales = miValidador.PedirInt("ingrese cantidad de comensales", 1, 100);

		ListarTurnos();

		turno = miValidador.PedirTurno("ingrese el numero de turno que desea", turnos);

		turno.MostrarMesasDisponibles(cantidadComensales);

		mesa = miValidador.PedirMesa("ingrese el numero de mesa que desea"); // no estaba en consigna, creo que se olvidaron.

		reserva = new Reserva(nombreCliente, telefonoCliente, cantidadComensales, turno, mesa);
		reserva.MostrarInformacionDeReserva();

		usuarioConfirmo = miValidador.PedirConfirmacion("confirme con 's' o 'n' la reserva");
		
		if (usuarioConfirmo) {
			turno.ReservarMesa(mesa, reserva);
		}
	}

	public void ListarReservasPorTurno() {
		ListarTurnos();
		Turno turno = miValidador.PedirTurno("ingrese el numero de turno que desea revisar");
		turno.MostrarReservas();
	}

	public void ListarTurnos() {
		for (int i = 0; i < turnos.Count; i++) {
			Console.WriteLine(turnos[i].ToString());
		}
	}	
}

class Mesa {
	private int numero;
	private int capacidad;
	private bool reservada;

	public Mesa(int numero, int capacidad) {
		this.numero = numero;
		this.capacidad = capacidad;
		this.reservada = false;
	}

	public void ReservarMesa() {
		this.reservada = true;
	}

	public bool GetReservada() {
		return this.reservada;
	}

	public int GetCapacidad() {
		return this.capacidad;
	}

	public int GetNumero() {
		return this.numero;
	}

	public override bool Equals(object objeto) {
		if (objeto != null) {
			if (objeto is Mesa) {
				return (objeto as Mesa).numero == this.numero;
			}
		}
	}

	public override string ToString() {
		return "mesa n° " + numero + " de capacidad " + capacidad
	}
}

class Turno {
	private int numero;
	private List<Mesa> mesas;
	private string horario;
	private List<Reserva> reservas;

	public Turno(int numero, string horario) {
		this.numero = numero;
		this.horario = horario;
		this.mesas = new List<Mesa>(
			new Mesa(1, 8),
			new Mesa(2, 8),
			new Mesa(3, 8),
			new Mesa(4, 6),
			new Mesa(5, 6),
			new Mesa(6, 6),
			new Mesa(7, 6),
			new Mesa(8, 4),
			new Mesa(9, 4),
			new Mesa(10, 4),
			new Mesa(11, 4),
			new Mesa(12, 2),
			new Mesa(13, 2),
			new Mesa(14, 2),
			new Mesa(15, 2),
			new Mesa(16, 2),
			new Mesa(17, 2),
			new Mesa(18, 2),
			new Mesa(19, 2),
			new Mesa(20, 2),
		);
		this.reservas = new List<Reserva>();
	}

	public override bool Equals(object objeto) {
		if (objeto != null) {
			if (objeto is Turno) {
				return (objeto as Turno).numero == this.numero;
			}
		}
	}

	public override string ToString() {
		return "Turno " + numero + ": tiene horario de " + horario + ".";
	}

	public void MostrarReservas() {
		for (int i = 1; i < reservas.Count; i++) {
			string nombreCliente = reservas[i].GetCliente();
			long telefonoCliente = reservas[i].GetTelefono();
			Console.WriteLine("Reserva n° " + i + ": cliente " + nombreCliente + " con telefono " + telefonoCliente);
		}
	}

	public void MostrarMesasDisponibles(int comensales) {
		List<Mesa> mesasDisponibles = new List<Mesa>();

		for (int i = 0; i < mesas.Count-1; i++) {
			bool disponible = !mesas[i].GetReservada();
			int capacidad = mesas[i].GetCapacidad();
			if (disponible && capacidad >= comensales && ((comensales > capacidad / 2) || comensales == 1)) {
				mesasDisponibles.Add(mesas[i]);
			}
		}

		if (mesasDisponibles.Count == 0) {
			Console.WriteLine("no se encuentran mesas disponibles");
		} else {
			Console.WriteLine("las mesas disponibles son las siguientes: ");
			for (int i = 0; i < mesasDisponibles.Count-1; i++) {
				Console.Log(mesasDisponibles[i].ToString());
			}
		}
	}
		
	public void ReservarMesa(Mesa mesa, Reserva reserva) {
		mesa.ReservarMesa();
		reservas.Add(reserva);
	}
}

class Reserva {
	private string nombreCliente;
	private long telefonoCliente;
	private int cantidadComensales;
	private Turno turno;
	private Mesa mesa;

	public Reserva(string nombreCliente, long telefonoCliente, int cantidadComensales, Turno turno, Mesa mesa) {
		this.nombreCliente = nombreCliente;
		this.telefonoCliente = telefonoCliente;
		this.cantidadComensales = cantidadComensales;
		this.turno = turno;
		this.mesa = mesa;
	}

	public void MostrarInformacionDeReserva() {
		return "nombre del cliente: " + nombreCliente + "\n telefono del cliente: " + telefonoCliente + 
			"\n cantidad de comensales: " + cantidadComensales + "\n" + turno.ToString() + "\n" + 
			mesa.ToString();
	}
}

class Validador {
	
	public Validador() { }

	public string PedirStringNoVacio(string mensaje) {
		string retorno = "";
		do {
			Console.WriteLine(mensaje);
			retorno = Console.ReadLine();
			if (retorno == "") {
				Console.WriteLine("debe ingresar una cadena de texto");
			}
		} while (retorno == "");
		return retorno;
	}

	public bool PedirConfirmacion(string mensaje) {
		string retorno = "";
		do {
			retorno = PedirStringNoVacio(mensaje);
			if (retorno != "s" && retorno != "n") {
				Console.WriteLine("debe ingresar 's' o 'n' para continuar");
			}
		} while (retorno != "s" && retorno != "n");
		if (retorno == "s") {
			return true;
		} else {
			return false;
		}
	}

	public int PedirInt(string mensaje, int minimo, int maximo) {
		int retorno = 0;
		bool pudoParsear = false;
		do {
			Console.WriteLine(mensaje);
			pudoParsear = Int32.TryParse(Console.ReadLine(), out retorno);
			if (!pudoParsear || retorno < minimo || retorno > maximo) {
				Console.WriteLine("debe ingresar un numero menor o igual a " + maximo + " y mayor o igual a " + minimo);
			}
		} while (!pudoParsear || retorno < minimo || retorno > maximo);
		return retorno;
	}

	public long PedirLong(string mensaje, long minimo, long maximo) {
		long retorno = 0;
		bool pudoParsear = false;
		do {
			Console.WriteLine(mensaje);
			pudoParsear = Long.TryParse(Console.ReadLine(), out retorno);
			if (!pudoParsear || retorno < minimo || retorno > maximo) { 
				Console.WriteLine("debe ingresar un numero menor o igual a " + maximo + " y mayor o igual a " + minimo);
			}
		} while (!pudoParsear || retorno < minimo || retorno > maximo);
		return retorno;
	}

	public Turno PedirTurno(string mensaje, List<Turno> turnos) {
		Turno retorno;
		int numeroDeTurno = PedirInt(mensaje, 1, 4);
		retorno = turnos.Find(turno => turno.GetNumero() == numeroDeTurno);
		return retorno;
	}
}




